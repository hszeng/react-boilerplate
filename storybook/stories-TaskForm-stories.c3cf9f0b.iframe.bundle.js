"use strict";(self.webpackChunk_forsyth_barr_ui_components=self.webpackChunk_forsyth_barr_ui_components||[]).push([[102],{"./src/stories/TaskForm.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CompletedTask:()=>CompletedTask,CreateNewTask:()=>CreateNewTask,EditExistingTask:()=>EditExistingTask,FormInModal:()=>FormInModal,FormWithValidation:()=>FormWithValidation,LowPriorityTask:()=>LowPriorityTask,TaskWithAllFields:()=>TaskWithAllFields,TaskWithoutDescription:()=>TaskWithoutDescription,__namedExportsOrder:()=>__namedExportsOrder,default:()=>TaskForm_stories});var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js"),react=__webpack_require__("../../node_modules/react/index.js"),styled_components_browser_esm=__webpack_require__("../../node_modules/styled-components/dist/styled-components.browser.esm.js"),Form=__webpack_require__("./src/components/Form/index.tsx"),Input=__webpack_require__("./src/components/Input/index.tsx"),Select=__webpack_require__("./src/components/Select/index.tsx"),Button=__webpack_require__("./src/components/Button/index.tsx");const TaskFormContainer=styled_components_browser_esm.Ay.div`
  width: 100%;
  max-width: 600px;
  margin: 0 auto;
`,FormActions=styled_components_browser_esm.Ay.div`
  display: flex;
  gap: 0.75rem;
  justify-content: flex-end;
  margin-top: 1rem;
  padding-top: 0.75rem;
  border-top: 1px solid var(--color-border);

  /* Responsive design */
  @media (max-width: 768px) {
    flex-direction: column;
  }
`,FormRow=styled_components_browser_esm.Ay.div`
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 0.75rem;

  /* Responsive design */
  @media (max-width: 768px) {
    grid-template-columns: 1fr;
  }
`,TaskForm=({task,onSubmit,onCancel,className=""})=>{const[formData,setFormData]=(0,react.useState)({title:task?.title||"",description:task?.description||"",status:task?.status||"pending",priority:task?.priority||"medium",dueDate:task?.dueDate||""}),[errors,setErrors]=(0,react.useState)({}),handleInputChange=field=>e=>{setFormData(prev=>({...prev,[field]:e.target.value})),errors[field]&&setErrors(prev=>({...prev,[field]:void 0}))},handleSelectChange=field=>e=>{setFormData(prev=>({...prev,[field]:e.target.value}))};return(0,jsx_runtime.jsx)(TaskFormContainer,{className,children:(0,jsx_runtime.jsxs)(Form.A,{onSubmit:e=>{e.preventDefault(),(()=>{const newErrors={};return formData.title.trim()||(newErrors.title="Title is required"),formData.dueDate||(newErrors.dueDate="Due Date is required"),setErrors(newErrors),0===Object.keys(newErrors).length})()&&onSubmit(formData)},children:[(0,jsx_runtime.jsx)(Input.A,{id:"task-title",type:"text",label:"Title",placeholder:"Enter task title...",value:formData.title,onChange:handleInputChange("title"),error:errors.title,required:!0}),(0,jsx_runtime.jsx)(Input.A,{id:"task-description",type:"textarea",label:"Description",placeholder:"Enter task description...",value:formData.description||"",onChange:handleInputChange("description"),rows:3}),(0,jsx_runtime.jsxs)(FormRow,{children:[(0,jsx_runtime.jsx)(Select.A,{id:"task-status",label:"Status",value:formData.status,onChange:handleSelectChange("status"),options:[{value:"pending",label:"Pending"},{value:"in progress",label:"In Progress"},{value:"completed",label:"Completed"}],required:!0}),(0,jsx_runtime.jsx)(Select.A,{id:"task-priority",label:"Priority",value:formData.priority,onChange:handleSelectChange("priority"),options:[{value:"low",label:"Low"},{value:"medium",label:"Medium"},{value:"high",label:"High"}],required:!0})]}),(0,jsx_runtime.jsx)(Input.A,{id:"task-dueDate",type:"date",label:"Due Date",value:formData.dueDate||"",onChange:handleInputChange("dueDate"),error:errors.dueDate,required:!0}),(0,jsx_runtime.jsxs)(FormActions,{children:[(0,jsx_runtime.jsx)(Button.A,{variant:"secondary",onClick:onCancel,children:"Cancel"}),(0,jsx_runtime.jsx)(Button.A,{variant:"primary",type:"submit",children:task?"Update Task":"Create Task"})]})]})})},TaskForm_TaskForm=TaskForm;TaskForm.__docgenInfo={description:"",methods:[],displayName:"TaskForm",props:{task:{required:!1,tsType:{name:"union",raw:"Task | null",elements:[{name:"Task"},{name:"null"}]},description:""},onSubmit:{required:!0,tsType:{name:"signature",type:"function",raw:"(data: TaskInput) => void",signature:{arguments:[{type:{name:"TaskInput"},name:"data"}],return:{name:"void"}}},description:""},onCancel:{required:!0,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""},className:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:"''",computed:!1}}}};const TaskForm_stories={title:"Components/TaskForm",component:TaskForm_TaskForm,parameters:{layout:"centered"},tags:["autodocs"],argTypes:{onSubmit:{action:"form submitted"},onCancel:{action:"form cancelled"}}},sampleTask={id:"1",title:"Complete project documentation",description:"Write comprehensive documentation for the Forsyth Barr UI components",dueDate:"2024-01-15",priority:"high",status:"in progress",createdAt:"2024-01-01T10:00:00Z",updatedAt:"2024-01-01T10:00:00Z"},CreateNewTask={args:{task:void 0}},EditExistingTask={args:{task:sampleTask}},TaskWithAllFields={args:{task:{id:"2",title:"Implement user authentication",description:"Add secure user authentication and authorization system with JWT tokens and role-based access control",dueDate:"2024-01-20",priority:"high",status:"pending",createdAt:"2024-01-01T10:00:00Z",updatedAt:"2024-01-01T10:00:00Z"}}},TaskWithoutDescription={args:{task:{id:"3",title:"Simple task",description:void 0,dueDate:"2024-01-25",priority:"low",status:"completed",createdAt:"2024-01-01T10:00:00Z",updatedAt:"2024-01-01T10:00:00Z"}}},LowPriorityTask={args:{task:{id:"4",title:"Design responsive layout",description:"Create responsive design for mobile and tablet devices",dueDate:"2024-01-30",priority:"low",status:"pending",createdAt:"2024-01-01T10:00:00Z",updatedAt:"2024-01-01T10:00:00Z"}}},CompletedTask={args:{task:{id:"5",title:"Setup testing environment",description:"Configure Jest and React Testing Library for component testing",dueDate:"2024-01-10",priority:"medium",status:"completed",createdAt:"2024-01-01T10:00:00Z",updatedAt:"2024-01-01T10:00:00Z"}}},FormInModal={render:args=>(0,jsx_runtime.jsxs)("div",{style:{padding:"2rem",backgroundColor:"var(--color-background)",border:"1px solid var(--color-border)",borderRadius:"8px",maxWidth:"600px",width:"100%"},children:[(0,jsx_runtime.jsx)("h2",{style:{marginBottom:"1rem"},children:"Edit Task"}),(0,jsx_runtime.jsx)(TaskForm_TaskForm,{...args})]}),args:{task:sampleTask}},FormWithValidation={render:args=>(0,jsx_runtime.jsx)(TaskForm_TaskForm,{...args,onSubmit:data=>{console.log("Form submitted with data:",data),"invalid"!==data.title?alert("Form submitted successfully!"):alert('Title cannot be "invalid"')}}),args:{task:void 0}},__namedExportsOrder=["CreateNewTask","EditExistingTask","TaskWithAllFields","TaskWithoutDescription","LowPriorityTask","CompletedTask","FormInModal","FormWithValidation"];CreateNewTask.parameters={...CreateNewTask.parameters,docs:{...CreateNewTask.parameters?.docs,source:{originalSource:"{\n  args: {\n    task: undefined\n  }\n}",...CreateNewTask.parameters?.docs?.source}}},EditExistingTask.parameters={...EditExistingTask.parameters,docs:{...EditExistingTask.parameters?.docs,source:{originalSource:"{\n  args: {\n    task: sampleTask\n  }\n}",...EditExistingTask.parameters?.docs?.source}}},TaskWithAllFields.parameters={...TaskWithAllFields.parameters,docs:{...TaskWithAllFields.parameters?.docs,source:{originalSource:"{\n  args: {\n    task: {\n      id: '2',\n      title: 'Implement user authentication',\n      description: 'Add secure user authentication and authorization system with JWT tokens and role-based access control',\n      dueDate: '2024-01-20',\n      priority: 'high',\n      status: 'pending',\n      createdAt: '2024-01-01T10:00:00Z',\n      updatedAt: '2024-01-01T10:00:00Z'\n    }\n  }\n}",...TaskWithAllFields.parameters?.docs?.source}}},TaskWithoutDescription.parameters={...TaskWithoutDescription.parameters,docs:{...TaskWithoutDescription.parameters?.docs,source:{originalSource:"{\n  args: {\n    task: {\n      id: '3',\n      title: 'Simple task',\n      description: undefined,\n      dueDate: '2024-01-25',\n      priority: 'low',\n      status: 'completed',\n      createdAt: '2024-01-01T10:00:00Z',\n      updatedAt: '2024-01-01T10:00:00Z'\n    }\n  }\n}",...TaskWithoutDescription.parameters?.docs?.source}}},LowPriorityTask.parameters={...LowPriorityTask.parameters,docs:{...LowPriorityTask.parameters?.docs,source:{originalSource:"{\n  args: {\n    task: {\n      id: '4',\n      title: 'Design responsive layout',\n      description: 'Create responsive design for mobile and tablet devices',\n      dueDate: '2024-01-30',\n      priority: 'low',\n      status: 'pending',\n      createdAt: '2024-01-01T10:00:00Z',\n      updatedAt: '2024-01-01T10:00:00Z'\n    }\n  }\n}",...LowPriorityTask.parameters?.docs?.source}}},CompletedTask.parameters={...CompletedTask.parameters,docs:{...CompletedTask.parameters?.docs,source:{originalSource:"{\n  args: {\n    task: {\n      id: '5',\n      title: 'Setup testing environment',\n      description: 'Configure Jest and React Testing Library for component testing',\n      dueDate: '2024-01-10',\n      priority: 'medium',\n      status: 'completed',\n      createdAt: '2024-01-01T10:00:00Z',\n      updatedAt: '2024-01-01T10:00:00Z'\n    }\n  }\n}",...CompletedTask.parameters?.docs?.source}}},FormInModal.parameters={...FormInModal.parameters,docs:{...FormInModal.parameters?.docs,source:{originalSource:"{\n  render: args => <div style={{\n    padding: '2rem',\n    backgroundColor: 'var(--color-background)',\n    border: '1px solid var(--color-border)',\n    borderRadius: '8px',\n    maxWidth: '600px',\n    width: '100%'\n  }}>\n      <h2 style={{\n      marginBottom: '1rem'\n    }}>Edit Task</h2>\n      <TaskForm {...args} />\n    </div>,\n  args: {\n    task: sampleTask\n  }\n}",...FormInModal.parameters?.docs?.source}}},FormWithValidation.parameters={...FormWithValidation.parameters,docs:{...FormWithValidation.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const handleSubmit = (data: any) => {\n      console.log('Form submitted with data:', data);\n      // Simulate validation error\n      if (data.title === 'invalid') {\n        alert('Title cannot be \"invalid\"');\n        return;\n      }\n      alert('Form submitted successfully!');\n    };\n    return <TaskForm {...args} onSubmit={handleSubmit} />;\n  },\n  args: {\n    task: undefined\n  }\n}",...FormWithValidation.parameters?.docs?.source}}}}}]);
//# sourceMappingURL=stories-TaskForm-stories.c3cf9f0b.iframe.bundle.js.map