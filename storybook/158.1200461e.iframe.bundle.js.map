{"version":3,"file":"158.1200461e.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAkFA;;;;;;AApEA;;;;;;;;AAUA;;;;;;AAQA;;;;;;AAkDA;AACA;;;;AAhCA;;;;AAMA;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;AClGA;;;AAKA;;;;;AAOA;;;;;AAOA;;;;AAMA;;;;;ACZA;;;;AAMA;;;;;;;;;;;AAWA;;;;AA7BA;;AA6BA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;;;AAUA;;;;AAMA;;;;;AChHA;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA","sources":["webpack://@forsyth-barr/ui-components/./src/components/Button/Button.tsx","webpack://@forsyth-barr/ui-components/./src/components/Form/Form.tsx","webpack://@forsyth-barr/ui-components/./src/components/Input/Input.tsx","webpack://@forsyth-barr/ui-components/./src/components/Select/Select.tsx"],"sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ButtonProps } from './Button.types';\n\nconst getVariantStyles = (variant: ButtonProps['variant'] = 'primary') => {\n  switch (variant) {\n    case 'secondary':\n      return css`\n        background-color: var(--color-secondary);\n        color: white;\n        &:hover:not(:disabled) {\n          background-color: #5a6268;\n        }\n      `;\n    case 'outline':\n      return css`\n        background-color: transparent;\n        color: var(--color-primary);\n        border: 2px solid var(--color-primary);\n        &:hover:not(:disabled) {\n          background-color: var(--color-primary);\n          color: white;\n        }\n      `;\n    case 'danger':\n      return css`\n        background-color: var(--color-danger);\n        color: white;\n        &:hover:not(:disabled) {\n          background-color: var(--color-error-hover);\n        }\n      `;\n    default:\n      return css`\n        background-color: var(--color-primary);\n        color: white;\n        &:hover:not(:disabled) {\n          background-color: var(--color-primary-hover);\n        }\n      `;\n  }\n};\n\nconst getSizeStyles = (size: ButtonProps['size'] = 'medium') => {\n  switch (size) {\n    case 'small':\n      return css`\n        padding: 0.5rem 1rem;\n        font-size: 0.875rem;\n        border-radius: 0.25rem;\n      `;\n    case 'large':\n      return css`\n        padding: 0.75rem 1.5rem;\n        font-size: 1.125rem;\n        border-radius: 0.5rem;\n      `;\n    default:\n      return css`\n        padding: 0.625rem 1.25rem;\n        font-size: 1rem;\n        border-radius: var(--border-radius);\n      `;\n  }\n};\n\nconst StyledButton = styled.button<{\n  $variant?: ButtonProps['variant'];\n  $size?: ButtonProps['size'];\n}>`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 500;\n  border: none;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  text-decoration: none;\n  white-space: nowrap;\n  user-select: none;\n  box-shadow: var(--shadow-sm);\n\n  ${props => getVariantStyles(props.$variant)}\n  ${props => getSizeStyles(props.$size)}\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    background-color: var(--color-background-disabled);\n    color: var(--color-text-disabled);\n  }\n\n  &:focus {\n    outline: 2px solid var(--color-primary);\n    outline-offset: 2px;\n  }\n\n  &:active:not(:disabled) {\n    transform: translateY(1px);\n    box-shadow: var(--shadow-sm);\n  }\n\n  /* Responsive design */\n  @media (max-width: 768px) {\n    width: 100%;\n    justify-content: center;\n  }\n`;\n\nconst Button: React.FC<ButtonProps> = ({\n  children,\n  variant = 'primary',\n  size = 'medium',\n  disabled = false,\n  onClick,\n  type = 'button',\n  className = '',\n  ...props\n}) => {\n  return (\n    <StyledButton\n      $variant={variant}\n      $size={size}\n      disabled={disabled}\n      onClick={onClick}\n      type={type}\n      className={className}\n      {...props}\n    >\n      {children}\n    </StyledButton>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FormProps } from './Form.types';\n\nconst FormContainer = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  width: 100%;\n`;\n\nconst Header = styled.div`\n  text-align: center;\n  margin-bottom: 0.75rem;\n`;\n\nconst Title = styled.h2`\n  margin: 0 0 0.25rem 0;\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: var(--color-text);\n`;\n\nconst Subtitle = styled.p`\n  margin: 0;\n  font-size: 0.875rem;\n  color: var(--color-text-secondary);\n  line-height: 1.4;\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.75rem;\n`;\n\nconst Form: React.FC<FormProps> = ({\n  title,\n  subtitle,\n  onSubmit,\n  children,\n  className = '',\n  ...props\n}) => {\n  return (\n    <FormContainer onSubmit={onSubmit} className={className} {...props}>\n      {(title || subtitle) && (\n        <Header>\n          {title && <Title>{title}</Title>}\n          {subtitle && <Subtitle>{subtitle}</Subtitle>}\n        </Header>\n      )}\n      <Content>{children}</Content>\n    </FormContainer>\n  );\n};\n\nexport default Form;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { InputProps } from './Input.types';\n\nconst getInputStyles = (type: InputProps['type'] = 'text') => {\n  if (type === 'textarea') {\n    return css`\n      resize: vertical;\n      min-height: 100px;\n      font-family: inherit;\n    `;\n  }\n  return css`\n    height: 2.5rem;\n  `;\n};\n\nconst InputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  width: 100%;\n`;\n\nconst Label = styled.label`\n  font-weight: 500;\n  color: var(--color-text);\n  font-size: 0.875rem;\n`;\n\nconst StyledInput = styled.input<InputProps>`\n  padding: 0.625rem 0.75rem;\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  font-size: 1rem;\n  background-color: var(--color-background);\n  color: var(--color-text);\n  transition: all 0.2s ease-in-out;\n  width: 100%;\n  box-sizing: border-box;\n\n  ${props => getInputStyles(props.type)}\n\n  &::placeholder {\n    color: var(--color-text-placeholder);\n  }\n\n  &:focus {\n    outline: none;\n    border-color: var(--color-primary);\n    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);\n  }\n\n  &:hover:not(:focus) {\n    border-color: var(--color-border-hover);\n  }\n\n  &:disabled {\n    background-color: var(--color-background-disabled);\n    color: var(--color-text-disabled);\n    cursor: not-allowed;\n  }\n\n  ${props =>\n    props.error &&\n    css`\n      border-color: var(--color-error);\n      &:focus {\n        box-shadow: 0 0 0 3px rgba(248, 113, 113, 0.1);\n      }\n    `}\n`;\n\nconst StyledTextarea = styled.textarea<InputProps>`\n  padding: 0.625rem 0.75rem;\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  font-size: 1rem;\n  background-color: var(--color-background);\n  color: var(--color-text);\n  transition: all 0.2s ease-in-out;\n  width: 100%;\n  box-sizing: border-box;\n  resize: vertical;\n  min-height: 100px;\n  font-family: inherit;\n\n  &::placeholder {\n    color: var(--color-text-placeholder);\n  }\n\n  &:focus {\n    outline: none;\n    border-color: var(--color-primary);\n    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);\n  }\n\n  &:hover:not(:focus) {\n    border-color: var(--color-border-hover);\n  }\n\n  &:disabled {\n    background-color: var(--color-background-disabled);\n    color: var(--color-text-disabled);\n    cursor: not-allowed;\n  }\n\n  ${props =>\n    props.error &&\n    css`\n      border-color: var(--color-error);\n      &:focus {\n        box-shadow: 0 0 0 3px rgba(248, 113, 113, 0.1);\n      }\n    `}\n`;\n\nconst ErrorText = styled.span`\n  color: var(--color-error);\n  font-size: 0.75rem;\n  margin-top: 0.25rem;\n`;\n\nconst Input: React.FC<InputProps> = ({\n  id,\n  type = 'text',\n  label,\n  placeholder,\n  value,\n  onChange,\n  error,\n  required = false,\n  disabled = false,\n  rows = 3,\n  className = '',\n  ...props\n}) => {\n  const InputComponent = type === 'textarea' ? StyledTextarea : StyledInput;\n\n  return (\n    <InputContainer className={className}>\n      {label && (\n        <Label htmlFor={id}>\n          {label}\n          {required && <span style={{ color: 'var(--color-error)' }}> *</span>}\n        </Label>\n      )}\n      <InputComponent\n        id={id}\n        type={type === 'textarea' ? undefined : type}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        error={error}\n        disabled={disabled}\n        required={required}\n        rows={type === 'textarea' ? rows : undefined}\n        {...props}\n      />\n      {error && <ErrorText>{error}</ErrorText>}\n    </InputContainer>\n  );\n};\n\nexport default Input;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { SelectProps } from './Select.types';\n\nconst SelectContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  width: 100%;\n`;\n\nconst Label = styled.label`\n  font-weight: 500;\n  color: var(--color-text);\n  font-size: 0.875rem;\n`;\n\nconst StyledSelect = styled.select<SelectProps>`\n  padding: 0.625rem 0.75rem;\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  font-size: 1rem;\n  background-color: var(--color-background);\n  color: var(--color-text);\n  transition: all 0.2s ease-in-out;\n  width: 100%;\n  box-sizing: border-box;\n  cursor: pointer;\n  appearance: none;\n  background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e\");\n  background-position: right 0.5rem center;\n  background-repeat: no-repeat;\n  background-size: 1.5em 1.5em;\n  padding-right: 2.5rem;\n\n  &:focus {\n    outline: none;\n    border-color: var(--color-primary);\n    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);\n  }\n\n  &:hover:not(:focus) {\n    border-color: var(--color-border-hover);\n  }\n\n  &:disabled {\n    background-color: var(--color-background-disabled);\n    color: var(--color-text-disabled);\n    cursor: not-allowed;\n    opacity: 0.6;\n  }\n\n  option {\n    background-color: var(--color-background);\n    color: var(--color-text);\n    padding: 0.5rem;\n  }\n\n  option:disabled {\n    color: var(--color-text-disabled);\n  }\n`;\n\nconst Select: React.FC<SelectProps> = ({\n  id,\n  label,\n  value,\n  onChange,\n  options,\n  placeholder,\n  required = false,\n  disabled = false,\n  className = '',\n  ...props\n}) => {\n  return (\n    <SelectContainer className={className}>\n      {label && (\n        <Label htmlFor={id}>\n          {label}\n          {required && <span style={{ color: 'var(--color-error)' }}> *</span>}\n        </Label>\n      )}\n      <StyledSelect\n        id={id}\n        value={value}\n        onChange={onChange}\n        disabled={disabled}\n        required={required}\n        {...props}\n      >\n        {placeholder && (\n          <option value=\"\" disabled>\n            {placeholder}\n          </option>\n        )}\n        {options.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </StyledSelect>\n    </SelectContainer>\n  );\n};\n\nexport default Select;\n"],"names":[],"sourceRoot":""}