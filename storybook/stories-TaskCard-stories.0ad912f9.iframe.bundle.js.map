{"version":3,"file":"stories-TaskCard-stories.0ad912f9.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAkFA;;;;;;AApEA;;;;;;;;AAUA;;;;;;AAQA;;;;;;AAkDA;AACA;;;;AAhCA;;;;AAMA;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;AC9EA;;AArBA;;AAIA;;AAiBA;;;;;;AAQA;;;;AAMA;;;;;AAOA;;;;;AAOA;;AAIA;;;;;;;ACRA;;AAIA;;;;;AAOA;;;;;AAOA;;;;;AAOA;;;;;AAOA;;;;AAMA;;;;;;AAMA;;;AAtFA;;;AAKA;;;AAiFA;AAGA;;;;;;AAMA;;;AA3EA;;;AAKA;;;AAsEA;AAGA;;;AAKA;;;;;;;;;AAWA","sources":["webpack://@forsyth-barr/ui-components/./src/components/Button/Button.tsx","webpack://@forsyth-barr/ui-components/./src/components/Card/Card.tsx","webpack://@forsyth-barr/ui-components/./src/components/TaskCard/TaskCard.tsx"],"sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ButtonProps } from './Button.types';\n\nconst getVariantStyles = (variant: ButtonProps['variant'] = 'primary') => {\n  switch (variant) {\n    case 'secondary':\n      return css`\n        background-color: var(--color-secondary);\n        color: white;\n        &:hover:not(:disabled) {\n          background-color: #5a6268;\n        }\n      `;\n    case 'outline':\n      return css`\n        background-color: transparent;\n        color: var(--color-primary);\n        border: 2px solid var(--color-primary);\n        &:hover:not(:disabled) {\n          background-color: var(--color-primary);\n          color: white;\n        }\n      `;\n    case 'danger':\n      return css`\n        background-color: var(--color-danger);\n        color: white;\n        &:hover:not(:disabled) {\n          background-color: var(--color-error-hover);\n        }\n      `;\n    default:\n      return css`\n        background-color: var(--color-primary);\n        color: white;\n        &:hover:not(:disabled) {\n          background-color: var(--color-primary-hover);\n        }\n      `;\n  }\n};\n\nconst getSizeStyles = (size: ButtonProps['size'] = 'medium') => {\n  switch (size) {\n    case 'small':\n      return css`\n        padding: 0.5rem 1rem;\n        font-size: 0.875rem;\n        border-radius: 0.25rem;\n      `;\n    case 'large':\n      return css`\n        padding: 0.75rem 1.5rem;\n        font-size: 1.125rem;\n        border-radius: 0.5rem;\n      `;\n    default:\n      return css`\n        padding: 0.625rem 1.25rem;\n        font-size: 1rem;\n        border-radius: var(--border-radius);\n      `;\n  }\n};\n\nconst StyledButton = styled.button<{\n  $variant?: ButtonProps['variant'];\n  $size?: ButtonProps['size'];\n}>`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 500;\n  border: none;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  text-decoration: none;\n  white-space: nowrap;\n  user-select: none;\n  box-shadow: var(--shadow-sm);\n\n  ${props => getVariantStyles(props.$variant)}\n  ${props => getSizeStyles(props.$size)}\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    background-color: var(--color-background-disabled);\n    color: var(--color-text-disabled);\n  }\n\n  &:focus {\n    outline: 2px solid var(--color-primary);\n    outline-offset: 2px;\n  }\n\n  &:active:not(:disabled) {\n    transform: translateY(1px);\n    box-shadow: var(--shadow-sm);\n  }\n\n  /* Responsive design */\n  @media (max-width: 768px) {\n    width: 100%;\n    justify-content: center;\n  }\n`;\n\nconst Button: React.FC<ButtonProps> = ({\n  children,\n  variant = 'primary',\n  size = 'medium',\n  disabled = false,\n  onClick,\n  type = 'button',\n  className = '',\n  ...props\n}) => {\n  return (\n    <StyledButton\n      $variant={variant}\n      $size={size}\n      disabled={disabled}\n      onClick={onClick}\n      type={type}\n      className={className}\n      {...props}\n    >\n      {children}\n    </StyledButton>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { CardProps } from './Card.types';\n\nconst getPaddingStyles = (padding: CardProps['padding'] = 'medium') => {\n  switch (padding) {\n    case 'small':\n      return css`\n        padding: 1rem;\n      `;\n    case 'large':\n      return css`\n        padding: 2rem;\n      `;\n    default:\n      return css`\n        padding: 1.5rem;\n      `;\n  }\n};\n\nconst CardContainer = styled.div<{\n  $padding?: CardProps['padding'];\n}>`\n  background-color: var(--color-background);\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  box-shadow: var(--shadow-sm);\n  transition: all 0.2s ease-in-out;\n  overflow: hidden;\n\n  ${props => getPaddingStyles(props.$padding)}\n\n  &:hover {\n    box-shadow: var(--shadow-md);\n    transform: translateY(-2px);\n  }\n`;\n\nconst Header = styled.div`\n  margin-bottom: 1rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid var(--color-border);\n`;\n\nconst Title = styled.h3`\n  margin: 0 0 0.5rem 0;\n  font-size: 1.125rem;\n  font-weight: 600;\n  color: var(--color-text);\n`;\n\nconst Subtitle = styled.p`\n  margin: 0;\n  font-size: 0.875rem;\n  color: var(--color-text-secondary);\n  line-height: 1.4;\n`;\n\nconst Content = styled.div`\n  color: var(--color-text);\n`;\n\nconst Card: React.FC<CardProps> = ({\n  title,\n  subtitle,\n  children,\n  padding = 'medium',\n  className = '',\n  ...props\n}) => {\n  return (\n    <CardContainer $padding={padding} className={className} {...props}>\n      {(title || subtitle) && (\n        <Header>\n          {title && <Title>{title}</Title>}\n          {subtitle && <Subtitle>{subtitle}</Subtitle>}\n        </Header>\n      )}\n      <Content>{children}</Content>\n    </CardContainer>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { TaskCardProps } from './TaskCard.types';\nimport Button from '../Button';\nimport Card from '../Card';\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case 'completed':\n      return css`\n        background-color: #d1fae5;\n        color: #065f46;\n      `;\n    case 'in progress':\n      return css`\n        background-color: #dbeafe;\n        color: #1e40af;\n      `;\n    default:\n      return css`\n        background-color: #fef3c7;\n        color: #92400e;\n      `;\n  }\n};\n\nconst getPriorityColor = (priority: string) => {\n  switch (priority) {\n    case 'high':\n      return css`\n        background-color: #fee2e2;\n        color: #991b1b;\n      `;\n    case 'medium':\n      return css`\n        background-color: #fef3c7;\n        color: #92400e;\n      `;\n    default:\n      return css`\n        background-color: #d1fae5;\n        color: #065f46;\n      `;\n  }\n};\n\nconst TaskCardContainer = styled(Card)`\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  }\n`;\n\nconst TaskHeader = styled.div`\n  margin-bottom: 1rem;\n`;\n\nconst TaskTitle = styled.h3`\n  margin: 0 0 0.5rem 0;\n  font-size: 1.125rem;\n  font-weight: 600;\n  color: var(--color-text);\n`;\n\nconst TaskDescription = styled.p`\n  margin: 0;\n  font-size: 0.875rem;\n  color: var(--color-text-secondary);\n  line-height: 1.4;\n`;\n\nconst TaskMeta = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  margin-bottom: 1rem;\n`;\n\nconst MetaItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 0.875rem;\n`;\n\nconst MetaLabel = styled.span`\n  font-weight: 500;\n  color: var(--color-text-secondary);\n  min-width: 60px;\n`;\n\nconst Status = styled.span<{ $status: string }>`\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.25rem;\n  font-size: 0.75rem;\n  font-weight: 500;\n  text-transform: capitalize;\n  ${props => getStatusColor(props.$status)}\n`;\n\nconst Priority = styled.span<{ $priority: string }>`\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.25rem;\n  font-size: 0.75rem;\n  font-weight: 500;\n  text-transform: capitalize;\n  ${props => getPriorityColor(props.$priority)}\n`;\n\nconst DueDate = styled.span`\n  color: var(--color-text);\n  font-weight: 500;\n`;\n\nconst TaskActions = styled.div`\n  display: flex;\n  gap: 0.5rem;\n  justify-content: flex-end;\n\n  /* Responsive design */\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nconst TaskCard: React.FC<TaskCardProps> = ({\n  task,\n  onEdit,\n  onDelete,\n  className = '',\n}) => {\n  return (\n    <TaskCardContainer className={className} padding=\"medium\">\n      <TaskHeader>\n        <TaskTitle>{task.title}</TaskTitle>\n        {task.description && (\n          <TaskDescription>{task.description}</TaskDescription>\n        )}\n      </TaskHeader>\n\n      <TaskMeta>\n        <MetaItem>\n          <MetaLabel>Status:</MetaLabel>\n          <Status $status={task.status}>{task.status}</Status>\n        </MetaItem>\n        <MetaItem>\n          <MetaLabel>Priority:</MetaLabel>\n          <Priority $priority={task.priority}>{task.priority}</Priority>\n        </MetaItem>\n        {task.dueDate && (\n          <MetaItem>\n            <MetaLabel>Due:</MetaLabel>\n            <DueDate>{new Date(task.dueDate).toLocaleDateString()}</DueDate>\n          </MetaItem>\n        )}\n      </TaskMeta>\n\n      <TaskActions>\n        <Button variant=\"outline\" size=\"small\" onClick={() => onEdit(task)}>\n          Edit\n        </Button>\n        <Button variant=\"danger\" size=\"small\" onClick={() => onDelete(task.id)}>\n          Delete\n        </Button>\n      </TaskActions>\n    </TaskCardContainer>\n  );\n};\n\nexport default TaskCard;\n"],"names":[],"sourceRoot":""}