{"version":3,"file":"stories-TaskForm-stories.c3cf9f0b.iframe.bundle.js","mappings":";;;;AAeA;;;;;;;;;;;;AAcA;;;;;;;;;AAWA","sources":["webpack://@forsyth-barr/ui-components/./src/components/TaskForm/TaskForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { TaskFormProps, TaskInput } from './TaskForm.types';\nimport Form from '../Form';\nimport Input from '../Input';\nimport { SelectOption } from '../Select/Select.types';\nimport Select from '../Select';\nimport Button from '../Button';\n\nconst TaskFormContainer = styled.div`\n  width: 100%;\n  max-width: 600px;\n  margin: 0 auto;\n`;\n\nconst FormActions = styled.div`\n  display: flex;\n  gap: 0.75rem;\n  justify-content: flex-end;\n  margin-top: 1rem;\n  padding-top: 0.75rem;\n  border-top: 1px solid var(--color-border);\n\n  /* Responsive design */\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nconst FormRow = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 0.75rem;\n\n  /* Responsive design */\n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nconst TaskForm: React.FC<TaskFormProps> = ({\n  task,\n  onSubmit,\n  onCancel,\n  className = '',\n}) => {\n  const [formData, setFormData] = useState<TaskInput>({\n    title: task?.title || '',\n    description: task?.description || '',\n    status: task?.status || 'pending',\n    priority: task?.priority || 'medium',\n    dueDate: task?.dueDate || '',\n  });\n\n  const [errors, setErrors] = useState<{ title?: string; dueDate?: string }>(\n    {}\n  );\n\n  const statusOptions: SelectOption[] = [\n    { value: 'pending', label: 'Pending' },\n    { value: 'in progress', label: 'In Progress' },\n    { value: 'completed', label: 'Completed' },\n  ];\n\n  const priorityOptions: SelectOption[] = [\n    { value: 'low', label: 'Low' },\n    { value: 'medium', label: 'Medium' },\n    { value: 'high', label: 'High' },\n  ];\n\n  const validateForm = () => {\n    const newErrors: { title?: string; dueDate?: string } = {};\n\n    if (!formData.title.trim()) {\n      newErrors.title = 'Title is required';\n    }\n\n    if (!formData.dueDate) {\n      newErrors.dueDate = 'Due Date is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (validateForm()) {\n      onSubmit(formData);\n    }\n  };\n\n  const handleInputChange =\n    (field: keyof TaskInput) =>\n    (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      setFormData(prev => ({ ...prev, [field]: e.target.value }));\n      if (errors[field as keyof typeof errors]) {\n        setErrors(prev => ({ ...prev, [field]: undefined }));\n      }\n    };\n\n  const handleSelectChange =\n    (field: keyof TaskInput) => (e: React.ChangeEvent<HTMLSelectElement>) => {\n      setFormData(prev => ({ ...prev, [field]: e.target.value as any }));\n    };\n\n  return (\n    <TaskFormContainer className={className}>\n      <Form onSubmit={handleSubmit}>\n        <Input\n          id=\"task-title\"\n          type=\"text\"\n          label=\"Title\"\n          placeholder=\"Enter task title...\"\n          value={formData.title}\n          onChange={handleInputChange('title')}\n          error={errors.title}\n          required\n        />\n\n        <Input\n          id=\"task-description\"\n          type=\"textarea\"\n          label=\"Description\"\n          placeholder=\"Enter task description...\"\n          value={formData.description || ''}\n          onChange={handleInputChange('description')}\n          rows={3}\n        />\n\n        <FormRow>\n          <Select\n            id=\"task-status\"\n            label=\"Status\"\n            value={formData.status}\n            onChange={handleSelectChange('status')}\n            options={statusOptions}\n            required\n          />\n\n          <Select\n            id=\"task-priority\"\n            label=\"Priority\"\n            value={formData.priority}\n            onChange={handleSelectChange('priority')}\n            options={priorityOptions}\n            required\n          />\n        </FormRow>\n\n        <Input\n          id=\"task-dueDate\"\n          type=\"date\"\n          label=\"Due Date\"\n          value={formData.dueDate || ''}\n          onChange={handleInputChange('dueDate')}\n          error={errors.dueDate}\n          required\n        />\n\n        <FormActions>\n          <Button variant=\"secondary\" onClick={onCancel}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" type=\"submit\">\n            {task ? 'Update Task' : 'Create Task'}\n          </Button>\n        </FormActions>\n      </Form>\n    </TaskFormContainer>\n  );\n};\n\nexport default TaskForm;\n"],"names":[],"sourceRoot":""}