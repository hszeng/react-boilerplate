{"version":3,"file":"stories-Modal-stories.c1e634dd.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAkFA;;;;;;AApEA;;;;;;;;AAUA;;;;;;AAQA;;;;;;AAkDA;AACA;;;;AAhCA;;;;AAMA;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;ACtEA;;;;;;;;;AAWA;;;AAvCA;;;AAKA;;;AAkCA;;;;;;;;;;;;AAcA;;;;;;;AASA;;;;;AAOA;;;;;;;;;;;;;;;;;;;AAqBA;;AAIA","sources":["webpack://@forsyth-barr/ui-components/./src/components/Button/Button.tsx","webpack://@forsyth-barr/ui-components/./src/components/Modal/Modal.tsx"],"sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ButtonProps } from './Button.types';\n\nconst getVariantStyles = (variant: ButtonProps['variant'] = 'primary') => {\n  switch (variant) {\n    case 'secondary':\n      return css`\n        background-color: var(--color-secondary);\n        color: white;\n        &:hover:not(:disabled) {\n          background-color: #5a6268;\n        }\n      `;\n    case 'outline':\n      return css`\n        background-color: transparent;\n        color: var(--color-primary);\n        border: 2px solid var(--color-primary);\n        &:hover:not(:disabled) {\n          background-color: var(--color-primary);\n          color: white;\n        }\n      `;\n    case 'danger':\n      return css`\n        background-color: var(--color-danger);\n        color: white;\n        &:hover:not(:disabled) {\n          background-color: var(--color-error-hover);\n        }\n      `;\n    default:\n      return css`\n        background-color: var(--color-primary);\n        color: white;\n        &:hover:not(:disabled) {\n          background-color: var(--color-primary-hover);\n        }\n      `;\n  }\n};\n\nconst getSizeStyles = (size: ButtonProps['size'] = 'medium') => {\n  switch (size) {\n    case 'small':\n      return css`\n        padding: 0.5rem 1rem;\n        font-size: 0.875rem;\n        border-radius: 0.25rem;\n      `;\n    case 'large':\n      return css`\n        padding: 0.75rem 1.5rem;\n        font-size: 1.125rem;\n        border-radius: 0.5rem;\n      `;\n    default:\n      return css`\n        padding: 0.625rem 1.25rem;\n        font-size: 1rem;\n        border-radius: var(--border-radius);\n      `;\n  }\n};\n\nconst StyledButton = styled.button<{\n  $variant?: ButtonProps['variant'];\n  $size?: ButtonProps['size'];\n}>`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 500;\n  border: none;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  text-decoration: none;\n  white-space: nowrap;\n  user-select: none;\n  box-shadow: var(--shadow-sm);\n\n  ${props => getVariantStyles(props.$variant)}\n  ${props => getSizeStyles(props.$size)}\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    background-color: var(--color-background-disabled);\n    color: var(--color-text-disabled);\n  }\n\n  &:focus {\n    outline: 2px solid var(--color-primary);\n    outline-offset: 2px;\n  }\n\n  &:active:not(:disabled) {\n    transform: translateY(1px);\n    box-shadow: var(--shadow-sm);\n  }\n\n  /* Responsive design */\n  @media (max-width: 768px) {\n    width: 100%;\n    justify-content: center;\n  }\n`;\n\nconst Button: React.FC<ButtonProps> = ({\n  children,\n  variant = 'primary',\n  size = 'medium',\n  disabled = false,\n  onClick,\n  type = 'button',\n  className = '',\n  ...props\n}) => {\n  return (\n    <StyledButton\n      $variant={variant}\n      $size={size}\n      disabled={disabled}\n      onClick={onClick}\n      type={type}\n      className={className}\n      {...props}\n    >\n      {children}\n    </StyledButton>\n  );\n};\n\nexport default Button;\n","import React, { useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { ModalProps } from './Modal.types';\n\nconst getSizeStyles = (size: ModalProps['size'] = 'medium') => {\n  switch (size) {\n    case 'small':\n      return css`\n        max-width: 400px;\n        width: 90%;\n      `;\n    case 'large':\n      return css`\n        max-width: 800px;\n        width: 90%;\n      `;\n    default:\n      return css`\n        max-width: 600px;\n        width: 90%;\n      `;\n  }\n};\n\nconst Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  padding: 1rem;\n  backdrop-filter: blur(4px);\n`;\n\nconst ModalContainer = styled.div<{\n  $size?: ModalProps['size'];\n}>`\n  background-color: var(--color-background);\n  border-radius: var(--border-radius);\n  box-shadow: var(--shadow-lg);\n  position: relative;\n  max-height: 90vh;\n  overflow-y: auto;\n  animation: modalSlideIn 0.3s ease-out;\n\n  ${props => getSizeStyles(props.$size)}\n\n  @keyframes modalSlideIn {\n    from {\n      opacity: 0;\n      transform: translateY(-20px) scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0) scale(1);\n    }\n  }\n`;\n\nconst Header = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 1rem 1.25rem 0 1.25rem;\n  border-bottom: 1px solid var(--color-border);\n  margin-bottom: 0.75rem;\n`;\n\nconst Title = styled.h2`\n  margin: 0;\n  font-size: 1.125rem;\n  font-weight: 600;\n  color: var(--color-text);\n`;\n\nconst CloseButton = styled.button`\n  background: none;\n  border: none;\n  font-size: 1.5rem;\n  cursor: pointer;\n  color: var(--color-text-secondary);\n  padding: 0.25rem;\n  border-radius: 0.25rem;\n  transition: all 0.2s ease-in-out;\n\n  &:hover {\n    background-color: var(--color-background-hover);\n    color: var(--color-text);\n  }\n\n  &:focus {\n    outline: 2px solid var(--color-primary);\n    outline-offset: 2px;\n  }\n`;\n\nconst Content = styled.div`\n  padding: 0 1.25rem 1.25rem 1.25rem;\n`;\n\nconst Modal: React.FC<ModalProps> = ({\n  isOpen,\n  onClose,\n  title,\n  size = 'medium',\n  children,\n  className = '',\n}) => {\n  useEffect(() => {\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'hidden';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen) return null;\n\n  return (\n    <Overlay\n      onClick={onClose}\n      onKeyDown={e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          onClose();\n        }\n      }}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <ModalContainer\n        $size={size}\n        className={className}\n        onClick={e => e.stopPropagation()}\n      >\n        {(title || onClose) && (\n          <Header>\n            {title && <Title>{title}</Title>}\n            {onClose && (\n              <CloseButton onClick={onClose} aria-label=\"Close modal\">\n                Ã—\n              </CloseButton>\n            )}\n          </Header>\n        )}\n        <Content>{children}</Content>\n      </ModalContainer>\n    </Overlay>\n  );\n};\n\nexport default Modal;\n"],"names":[],"sourceRoot":""}